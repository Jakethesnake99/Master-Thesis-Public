labs(x = "Size Probability sample", y = expression("Relative ARMSE to "~hat(beta)) ) +
scale_x_continuous(breaks = c(25, 50, 75, 100)) +
scale_y_continuous(breaks = c(-1,-0.8,-0.6,-0.4,-0.2, 0, 0.2, 0.4), limits = c(-1, 0.4)) +
geom_hline(yintercept=0, linetype='dotted', col = 'black') +
theme(legend.position = "bottom")
plot_mse
library("ggforce")
library(cowplot)
df=readRDS("Final_results_results")
df=df[df$method != "beta_ps",]
df=df[df$method != "beta_nps",]
df=df[df$method != "beta_optimal",]
glabs=c(expression(hat(beta)[c]),expression(hat(beta)[lambda  * lambda]),expression(hat(beta)[lambda*eta]),expression(hat(beta)[lambda ]))
df$Facetr <- c('rho*" = 0.5"', 'rho*" = 0.7"', 'rho*" = 0.8"')[match(df$r, c(0.5, 0.7, 0.9))]
df$Facetbias_factor <- c("'f = -0.5'", "'f = 1'", "'f = 3'")[match(df$bias_factor, c(-0.5, 1, 3))]
df$Facetsig <- c('sigma^2*" = 2"','sigma^2*" = 10"')[match(df$y_var, c(2,10))]
df$Facetmc <- c("'Multicollinearity = 0.5'", "'Multicollinearity = 0.7'", "'Multicollinearity = 0.9'")[match(df$multicoliniarity, c(0.38, 0.64, 0.87))]
plot_mse <- ggplot(df, aes(x = ps_n, y = rarmse, colour = method, shape = method, linetype = method)) +
geom_point(size = 4) +
geom_line() +
scale_color_manual(values  = estimation_colors, name = "Estimation Method",labels = glabs) +
scale_shape_manual(values = estimation_shapes, name = "Estimation Method", labels = glabs) +
scale_linetype_manual(values = c("dashed", "dashed", "dashed", "dashed"), name = "Estimation Method", labels = glabs) +
labs(x = "Size Probability sample", y = expression("Relative ARMSE to "~hat(beta)) ) +
scale_x_continuous(breaks = c(25, 50, 75, 100)) +
scale_y_continuous(breaks = c(-1,-0.8,-0.6,-0.4,-0.2, 0, 0.2, 0.4), limits = c(-1, 0.4)) +
geom_hline(yintercept=0, linetype='dotted', col = 'black') +
theme(legend.position = "bottom")
llegend = cowplot::get_plot_component(plot_mse, 'guide-box-bottom', return_all = TRUE)
# Save the legend as a separate plot
ggsave(filename = 'legend_big.pdf', plot = llegend,units ="cm" , width = 10, height = 1)
# Loop to save plots with an empty legend for pages 1 and 3, and full legend for page 2
# Loop to save plots with an empty legend for pages 1 and 3, and full legend for page 2
create_plot <- function(page_number) {
p_save <- plot_mse +
theme(legend.position = "none") +
facet_grid_paginate(Facetr + Facetbias_factor ~ Facetsig + Facetmc, nrow = 3, ncol = 3, page = page_number,
labeller = label_parsed)
return(p_save)
}
# Loop to save plots with an empty legend for pages 1 and 3, and full legend for page 2
for (i in 1:6) {
p_save <- create_plot(i)
ggsave(plot = p_save, filename = paste0('RARMSEplot_', i, '.pdf'), width = a4_height, height = a4_width)
}
library("ggforce")
library(cowplot)
df=readRDS("Final_results_results")
df=df[df$method != "beta_ps",]
df=df[df$method != "beta_nps",]
df=df[df$method != "beta_optimal",]
glabs=c(expression(hat(beta)[c]),expression(hat(beta)[lambda  * lambda]),expression(hat(beta)[lambda*eta]),expression(hat(beta)[lambda ]))
df$Facetr <- c('rho*" = 0.5"', 'rho*" = 0.7"', 'rho*" = 0.8"')[match(df$r, c(0.5, 0.7, 0.9))]
df$Facetbias_factor <- c("'f = -0.5'", "'f = 1'", "'f = 3'")[match(df$bias_factor, c(-0.5, 1, 3))]
df$Facetsig <- c('sigma^2*" = 2"','sigma^2*" = 10"')[match(df$y_var, c(2,10))]
df$Facetmc <- c("'Multicollinearity = 0.5'", "'Multicollinearity = 0.7'", "'Multicollinearity = 0.9'")[match(df$multicoliniarity, c(0.38, 0.64, 0.87))]
plot_mse <- ggplot(df, aes(x = ps_n, y = rMoAB, colour = method, shape = method, linetype = method)) +
geom_point(size = 4) +
geom_line() +
scale_color_manual(values  = estimation_colors, name = "Estimation Method",labels = glabs) +
scale_shape_manual(values = estimation_shapes, name = "Estimation Method", labels = glabs) +
scale_linetype_manual(values = c("dashed", "dashed", "dashed", "dashed"), name = "Estimation Method", labels = glabs) +
labs(x = "Size Probability sample", y = expression("Relative MoAB to "~hat(w)) ) +
scale_x_continuous(breaks = c(25, 50, 75, 100)) +
scale_y_continuous(breaks = c(-1,-0.8,-0.6,-0.4,-0.2, 0, 0.2, 0.4), limits = c(-1, 0.4)) +
geom_hline(yintercept=0, linetype='dotted', col = 'black') +
theme(legend.position = "bottom")
# Loop to save plots with an empty legend for pages 1 and 3, and full legend for page 2
a4_width <- 210 / 25.4
a4_height <- 297 / 25.4
# Loop to save plots with an empty legend for pages 1 and 3, and full legend for page 2
create_plot <- function(page_number) {
p_save <- plot_mse +
theme(legend.position = "none") +
facet_grid_paginate(Facetr + Facetbias_factor ~ Facetsig + Facetmc, nrow = 3, ncol = 3, page = page_number,
labeller = label_parsed)
return(p_save)
}
# Loop to save plots with an empty legend for pages 1 and 3, and full legend for page 2
for (i in 1:6) {
p_save <- create_plot(i)
ggsave(plot = p_save, filename = paste0('rMoABplot_', i, '.pdf'), width = a4_height, height = a4_width)
}
df <- readRDS("Final_results_Hyperparms")
# Function to calculate the proportion of times lambda_ab > lambda_star in a section
# Function to calculate the proportion of times lambda_ab > lambda_star in a section
calc_proportion <- function(data) {
mean(data$lambda_ab > data$lambda_star)
}
# Function to calculate the proportion of times lambda_ab == 10^5 in a section
calc_special_proportion <- function(data) {
mean(data$lambda_ab == 10^5)
}
# Group data into sections of 1000 rows and calculate the proportions
section_size <- 1000
n_sections <- nrow(df) %/% section_size
# Initialize vectors to store proportions
proportions <- numeric(n_sections)
special_proportions <- numeric(n_sections)
for (i in 1:n_sections) {
start_idx <- (i - 1) * section_size + 1
end_idx <- i * section_size
section_data <- df[start_idx:end_idx, ]
proportions[i] <- calc_proportion(section_data)
special_proportions[i] <- calc_special_proportion(section_data)
}
# Create a data frame for plotting
plot_data <- data.frame(
Section = 1:n_sections,
Proportion = proportions,
SpecialProportion = special_proportions
)
mean_proportion <- mean(proportions)
# Create the bar plot
hyper_prop_plot=ggplot(plot_data, aes(x = factor(Section))) +
geom_bar(aes(y = Proportion, fill = "Proportion > lambda*"), stat = "identity", color = "blue", alpha = 0.7) +
geom_bar(aes(y = SpecialProportion, fill = "lambda_ab == 10^5"), stat = "identity", color = "red", alpha = 0.7) +
geom_hline(yintercept = mean_proportion, linetype = "dashed", color = "black") +
scale_fill_manual(values = c("Proportion > lambda*" = "blue", "lambda_ab == 10^5" = "red"),
labels = c(expression(hat(lambda) == 10^5),expression(hat(lambda) > lambda^"*"))
) +
labs(
x = NULL,  # Remove x-axis labels
y = expression(hat(lambda) > lambda^"*")
) +
theme(axis.text.x = element_blank())  # Remove x-axis text
hyper_prop_plot
ggsave(plot = hyper_prop_plot, filename = paste0('hyper_prop_plot.pdf'), width = a4_height, height = a4_width)
df <- readRDS("Final_results_Hyperparms")
# Function to calculate the proportion of times lambda_ab > lambda_star in a section
# Function to calculate the proportion of times lambda_ab > lambda_star in a section
calc_proportion <- function(data) {
mean(data$lambda_ab > data$lambda_star)
}
# Function to calculate the proportion of times lambda_ab == 10^5 in a section
calc_special_proportion <- function(data) {
mean(data$lambda_ab == 10^5)
}
# Group data into sections of 1000 rows and calculate the proportions
section_size <- 1000
n_sections <- nrow(df) %/% section_size
# Initialize vectors to store proportions
proportions <- numeric(n_sections)
special_proportions <- numeric(n_sections)
for (i in 1:n_sections) {
start_idx <- (i - 1) * section_size + 1
end_idx <- i * section_size
section_data <- df[start_idx:end_idx, ]
proportions[i] <- calc_proportion(section_data)
special_proportions[i] <- calc_special_proportion(section_data)
}
# Create a data frame for plotting
plot_data <- data.frame(
Section = 1:n_sections,
Proportion = proportions,
SpecialProportion = special_proportions
)
mean_proportion <- mean(proportions)
# Create the bar plot
hyper_prop_plot=ggplot(plot_data, aes(x = factor(Section))) +
geom_bar(aes(y = Proportion, fill = "Proportion > lambda*"), stat = "identity", color = "blue", alpha = 0.7) +
geom_bar(aes(y = SpecialProportion, fill = "lambda_ab == 10^5"), stat = "identity", color = "red", alpha = 0.7) +
geom_hline(yintercept = mean_proportion, linetype = "dashed", color = "black") +
scale_fill_manual(values = c("Proportion > lambda*" = "blue", "lambda_ab == 10^5" = "red",name = "Estimation Method"),
labels = c(expression(hat(lambda) == 10^5),expression(hat(lambda) > lambda^"*"))
) +
labs(
x = NULL,  # Remove x-axis labels
y = expression(hat(lambda) > lambda^"*")
) +
theme(axis.text.x = element_blank())  # Remove x-axis text
hyper_prop_plot
ggsave(plot = hyper_prop_plot, filename = paste0('hyper_prop_plot.pdf'), width = a4_height, height = a4_width)
hyper_prop_plot=ggplot(plot_data, aes(x = factor(Section))) +
geom_bar(aes(y = Proportion, fill = "Proportion > lambda*"), stat = "identity", color = "blue", alpha = 0.7) +
geom_bar(aes(y = SpecialProportion, fill = "lambda_ab == 10^5"), stat = "identity", color = "red", alpha = 0.7) +
geom_hline(yintercept = mean_proportion, linetype = "dashed", color = "black") +
scale_fill_manual(values = c("Proportion > lambda*" = "blue", "lambda_ab == 10^5" = "red",name = " "),
labels = c(expression(hat(lambda) == 10^5),expression(hat(lambda) > lambda^"*"))
) +
labs(
x = NULL,  # Remove x-axis labels
y = expression(hat(lambda) > lambda^"*")
) +
theme(axis.text.x = element_blank())  # Remove x-axis text
hyper_prop_plot
ggsave(plot = hyper_prop_plot, filename = paste0('hyper_prop_plot.pdf'), width = a4_height, height = a4_width)
hyper_prop_plot=ggplot(plot_data, aes(x = factor(Section))) +
geom_bar(aes(y = Proportion, fill = "Proportion > lambda*"), stat = "identity", color = "blue", alpha = 0.7) +
geom_bar(aes(y = SpecialProportion, fill = "lambda_ab == 10^5"), stat = "identity", color = "red", alpha = 0.7) +
geom_hline(yintercept = mean_proportion, linetype = "dashed", color = "black") +
scale_fill_manual(values = c("Proportion > lambda*" = "blue", "lambda_ab == 10^5" = "red",name = " "),
labels = c(expression(hat(lambda) == 10^5),expression(hat(lambda) > lambda^"*"))
) +
labs(
x = NULL,  # Remove x-axis labels
y = expression(hat(lambda) > lambda^"*")
) +
theme(axis.text.x = element_blank(),
legend.title = element_blank())  # Remove x-axis text
hyper_prop_plot
ggsave(plot = hyper_prop_plot, filename = paste0('hyper_prop_plot.pdf'), width = a4_height, height = a4_width)
df=readRDS("Final_results_results")
df=df[df$method %in% c("beta_ridge", "beta_optimal","beta_target"),]
glabs=c(expression(hat(beta)[lambda^"*"*eta^"*"]),expression(hat(beta)[lambda*eta]),expression(hat(beta)[lambda]))
# Match values in df$r to indices of expressions
# Ensure variable names in the dataset match these exactly
df$Facetr <- c('rho*" = 0.5"', 'rho*" = 0.7"', 'rho*" = 0.8"')[match(df$r, c(0.5, 0.7, 0.9))]
df$Facetbias_factor <- c("'f = -0.5'", "'f = 1'", "'f = 3'")[match(df$bias_factor, c(-0.5, 1, 3))]
df$Facetsig <- c('sigma^2*" = 2"','sigma^2*" = 10"')[match(df$y_var, c(2,10))]
df$Facetmc <- c("'Multicollinearity = 0.5'", "'Multicollinearity = 0.7'", "'Multicollinearity = 0.9'")[match(df$multicoliniarity, c(0.38, 0.64, 0.87))]
plot_mse <- ggplot(df, aes(x = ps_n, y = rarmse, colour = method, shape = method, linetype = method)) +
geom_point(size = 4) +
geom_line() +
scale_color_manual(values  = estimation_colors, name = "Estimation Method",labels = glabs) +
scale_shape_manual(values = estimation_shapes, name = "Estimation Method", labels = glabs) +
scale_linetype_manual(values = c("dashed", "dashed", "dashed", "dashed"), name = "Estimation Method", labels = glabs) +
labs(x = "Size Probability sample", y = expression("Relative ARMSE to "~hat(beta)) ) +
scale_x_continuous(breaks = c(25, 50, 75, 100)) +
scale_y_continuous(breaks = c(-1,-0.8,-0.6,-0.4,-0.2, 0, 0.2, 0.4), limits = c(-1, 0.4)) +
geom_hline(yintercept=0, linetype='dotted', col = 'black') +
theme(legend.position = "bottom")
legend = cowplot::get_plot_component(plot_mse_optimal, 'guide-box-bottom', return_all = TRUE)
df=readRDS("Final_results_results")
df=df[df$method %in% c("beta_ridge", "beta_optimal","beta_target"),]
glabs=c(expression(hat(beta)[lambda^"*"*eta^"*"]),expression(hat(beta)[lambda*eta]),expression(hat(beta)[lambda]))
# Match values in df$r to indices of expressions
# Ensure variable names in the dataset match these exactly
df$Facetr <- c('rho*" = 0.5"', 'rho*" = 0.7"', 'rho*" = 0.8"')[match(df$r, c(0.5, 0.7, 0.9))]
df$Facetbias_factor <- c("'f = -0.5'", "'f = 1'", "'f = 3'")[match(df$bias_factor, c(-0.5, 1, 3))]
df$Facetsig <- c('sigma^2*" = 2"','sigma^2*" = 10"')[match(df$y_var, c(2,10))]
df$Facetmc <- c("'Multicollinearity = 0.5'", "'Multicollinearity = 0.7'", "'Multicollinearity = 0.9'")[match(df$multicoliniarity, c(0.38, 0.64, 0.87))]
plot_mse_optimal <- ggplot(df, aes(x = ps_n, y = rarmse, colour = method, shape = method, linetype = method)) +
geom_point(size = 4) +
geom_line() +
scale_color_manual(values  = estimation_colors, name = "Estimation Method",labels = glabs) +
scale_shape_manual(values = estimation_shapes, name = "Estimation Method", labels = glabs) +
scale_linetype_manual(values = c("dashed", "dashed", "dashed", "dashed"), name = "Estimation Method", labels = glabs) +
labs(x = "Size Probability sample", y = expression("Relative ARMSE to "~hat(beta)) ) +
scale_x_continuous(breaks = c(25, 50, 75, 100)) +
scale_y_continuous(breaks = c(-1,-0.8,-0.6,-0.4,-0.2, 0, 0.2, 0.4), limits = c(-1, 0.4)) +
geom_hline(yintercept=0, linetype='dotted', col = 'black') +
theme(legend.position = "bottom")
legend = cowplot::get_plot_component(plot_mse_optimal, 'guide-box-bottom', return_all = TRUE)
# Save the legend as a separate plot
ggsave(filename = 'legend_small.pdf', plot = legend,units ="cm" , width = 8, height = 1)
# Loop to save plots with an empty legend for pages 1 and 3, and full legend for page 2
a4_width <- 210 / 25.4
a4_height <- 297 / 25.4
# Loop to save plots with an empty legend for pages 1 and 3, and full legend for page 2
create_plot <- function(page_number) {
p_save <- plot_mse_optimal +
theme(legend.position = "none") +
facet_grid_paginate(Facetr + Facetbias_factor ~ Facetsig + Facetmc, nrow = 3, ncol = 3, page = page_number,
labeller = label_parsed)
return(p_save)
}
# Loop to save plots with an empty legend for pages 1 and 3, and full legend for page 2
for (i in 1:6) {
p_save <- create_plot(i)
ggsave(plot = p_save, filename = paste0('rplot_mse_optimalplot_', i, '.pdf'), width = a4_height, height = a4_width)
}
estimation_colors <- c(
"beta_bays" = "#E41A1C", # Red
"beta_dist" = "#377EB8", # Blue
"beta_ridge" = "#4DAF4A", # Green
"beta_target" = "#984EA3", # Purple
"beta_optimal" = "#FF7F00", # Orange
"beta_ps" = "#FFFF33",  # Yellow
"beta_nps" = "#A52A2A"  # brown
)
# Define a named vector of shapes for your estimation methods
estimation_shapes <- c(
"beta_bays" = 15, # Circle
"beta_dist" = 16, # Triangle
"beta_ridge" = 17, # Diamond
"beta_target" = 18, # Solid circle
"beta_optimal" = 4, # Square
"beta_ps" = 8,   # Star
"beta_nps" = 9
)
a4_width <- 210 / 25.4
a4_height <- 297 / 25.4
df=readRDS("Final_results_results")
df=df[df$method %in% c("beta_ridge", "beta_optimal","beta_target"),]
glabs=c(expression(hat(beta)[lambda^"*"*eta^"*"]),expression(hat(beta)[lambda*eta]),expression(hat(beta)[lambda]))
# Match values in df$r to indices of expressions
# Ensure variable names in the dataset match these exactly
df$Facetr <- c('rho*" = 0.5"', 'rho*" = 0.7"', 'rho*" = 0.8"')[match(df$r, c(0.5, 0.7, 0.9))]
df$Facetbias_factor <- c("'f = -0.5'", "'f = 1'", "'f = 3'")[match(df$bias_factor, c(-0.5, 1, 3))]
df$Facetsig <- c('sigma^2*" = 2"','sigma^2*" = 10"')[match(df$y_var, c(2,10))]
df$Facetmc <- c("'Multicollinearity = 0.5'", "'Multicollinearity = 0.7'", "'Multicollinearity = 0.9'")[match(df$multicoliniarity, c(0.38, 0.64, 0.87))]
plot_mse_optimal <- ggplot(df, aes(x = ps_n, y = rarmse, colour = method, shape = method, linetype = method)) +
geom_point(size = 4) +
geom_line() +
scale_color_manual(values  = estimation_colors, name = "Estimation Method",labels = glabs) +
scale_shape_manual(values = estimation_shapes, name = "Estimation Method", labels = glabs) +
scale_linetype_manual(values = c("dashed", "dashed", "dashed", "dashed"), name = "Estimation Method", labels = glabs) +
labs(x = "Size Probability sample", y = expression("Relative ARMSE to "~hat(beta)) ) +
scale_x_continuous(breaks = c(25, 50, 75, 100)) +
scale_y_continuous(breaks = c(-1,-0.8,-0.6,-0.4,-0.2, 0, 0.2, 0.4), limits = c(-1, 0.4)) +
geom_hline(yintercept=0, linetype='dotted', col = 'black') +
theme(legend.position = "bottom")
legend = cowplot::get_plot_component(plot_mse_optimal, 'guide-box-bottom', return_all = TRUE)
# Save the legend as a separate plot
ggsave(filename = 'legend_small.pdf', plot = legend,units ="cm" , width = 8, height = 1)
# Loop to save plots with an empty legend for pages 1 and 3, and full legend for page 2
a4_width <- 210 / 25.4
a4_height <- 297 / 25.4
# Loop to save plots with an empty legend for pages 1 and 3, and full legend for page 2
create_plot <- function(page_number) {
p_save <- plot_mse_optimal +
theme(legend.position = "none") +
facet_grid_paginate(Facetr + Facetbias_factor ~ Facetsig + Facetmc, nrow = 3, ncol = 3, page = page_number,
labeller = label_parsed)
return(p_save)
}
# Loop to save plots with an empty legend for pages 1 and 3, and full legend for page 2
for (i in 1:6) {
p_save <- create_plot(i)
ggsave(plot = p_save, filename = paste0('rplot_mse_optimalplot_', i, '.pdf'), width = a4_height, height = a4_width)
}
df
df=readRDS("Final_results_results")
df=df[df$method != "beta_nps",]
glabs=c(expression(hat(beta)[c]),expression(hat(beta)[lambda  * lambda]),expression(hat(beta)[lambda^"*"*eta^"*"]),expression(hat(beta))  ,expression(hat(beta)[lambda*eta]),expression(hat(beta)[lambda ]))
df$Facetr <- c('rho*" = 0.5"', 'rho*" = 0.7"', 'rho*" = 0.8"')[match(df$r, c(0.5, 0.7, 0.9))]
df$Facetbias_factor <- c("'f = -0.5'", "'f = 1'", "'f = 3'")[match(df$bias_factor, c(-0.5, 1, 3))]
df$Facetsig <- c('sigma^2*" = 2"','sigma^2*" = 10"')[match(df$y_var, c(2,10))]
df$Facetmc <- c("'Multicollinearity = 0.5'", "'Multicollinearity = 0.7'", "'Multicollinearity = 0.9'")[match(df$multicoliniarity, c(0.38, 0.64, 0.87))]
plot_mse <- ggplot(df, aes(x = ps_n, y = rmse, colour = method, shape = method, linetype = method)) +
geom_point(size = 4) +
geom_line() +
scale_color_manual(values  = estimation_colors, name = "Estimation Method",labels = glabs) +
scale_shape_manual(values = estimation_shapes, name = "Estimation Method", labels = glabs) +
scale_linetype_manual(values = c("dashed", "dashed", "dashed", "dashed","dashed","dashed"), name = "Estimation Method", labels = glabs) +
labs(x = "Size Probability sample", y = expression("ARMSE") ) +
scale_x_continuous(breaks = c(25, 50, 75, 100)) +
theme(legend.position = "bottom")
plot_mse
glabs=c(expression(hat(beta)[c]),expression(hat(beta)[lambda  * lambda]),expression(hat(beta)[lambda^"*"*eta^"*"]),expression(hat(beta))  ,expression(hat(beta)[lambda*eta]),expression(hat(beta)[lambda ]))
df$Facetr <- c('rho*" = 0.5"', 'rho*" = 0.7"', 'rho*" = 0.8"')[match(df$r, c(0.5, 0.7, 0.9))]
df$Facetbias_factor <- c("'f = -0.5'", "'f = 1'", "'f = 3'")[match(df$bias_factor, c(-0.5, 1, 3))]
df$Facetsig <- c('sigma^2*" = 2"','sigma^2*" = 10"')[match(df$y_var, c(2,10))]
df$Facetmc <- c("'Multicollinearity = 0.5'", "'Multicollinearity = 0.7'", "'Multicollinearity = 0.9'")[match(df$multicoliniarity, c(0.38, 0.64, 0.87))]
plot_mse <- ggplot(df, aes(x = ps_n, y = rmse, colour = method, shape = method, linetype = method)) +
geom_point(size = 4) +
geom_line() +
scale_color_manual(values  = estimation_colors, name = "Estimation Method",labels = glabs) +
scale_shape_manual(values = estimation_shapes, name = "Estimation Method", labels = glabs) +
scale_linetype_manual(values = c("dashed", "dashed", "dashed", "dashed","dashed","dashed"), name = "Estimation Method", labels = glabs) +
labs(x = "Size Probability sample", y = expression("ARMSE") ) +
scale_x_continuous(breaks = c(25, 50, 75, 100)) +
theme(legend.position = "bottom")
llegend = cowplot::get_plot_component(plot_mse, 'guide-box-bottom', return_all = TRUE)
# Save the legend as a separate plot
ggsave(filename = 'legend_big_raw.pdf', plot = llegend,units ="cm" , width = 10, height = 2)
# Loop to save plots with an empty legend for pages 1 and 3, and full legend for page 2
a4_width <- 210 / 25.4
a4_height <- 297 / 25.4
# Loop to save plots with an empty legend for pages 1 and 3, and full legend for page 2
create_plot <- function(page_number) {
p_save <- plot_mse +
theme(legend.position = "none") +
facet_grid_paginate(Facetr + Facetbias_factor ~ Facetsig + Facetmc, nrow = 3, ncol = 3, page = page_number,
labeller = label_parsed)
return(p_save)
}
# Loop to save plots with an empty legend for pages 1 and 3, and full legend for page 2
for (i in 1:6) {
p_save <- create_plot(i)
ggsave(plot = p_save, filename = paste0('ARMSEplot_', i, '.pdf'), width = a4_height, height = a4_width)
}
df=readRDS("Final_results_results")
df=df[df$method != "beta_nps",]
##########
glabs=c(expression(hat(beta)[c]),expression(hat(beta)[lambda  * lambda]),expression(hat(beta)[lambda^"*"*eta^"*"]),expression(hat(beta))  ,expression(hat(beta)[lambda*eta]),expression(hat(beta)[lambda ]))
df$Facetr <- c('rho*" = 0.5"', 'rho*" = 0.7"', 'rho*" = 0.8"')[match(df$r, c(0.5, 0.7, 0.9))]
df$Facetbias_factor <- c("'f = -0.5'", "'f = 1'", "'f = 3'")[match(df$bias_factor, c(-0.5, 1, 3))]
df$Facetsig <- c('sigma^2*" = 2"','sigma^2*" = 10"')[match(df$y_var, c(2,10))]
df$Facetmc <- c("'Multicollinearity = 0.5'", "'Multicollinearity = 0.7'", "'Multicollinearity = 0.9'")[match(df$multicoliniarity, c(0.38, 0.64, 0.87))]
plot_mse <- ggplot(df, aes(x = ps_n, y = MAB, colour = method, shape = method, linetype = method)) +
geom_point(size = 4) +
geom_line() +
scale_color_manual(values  = estimation_colors, name = "Estimation Method",labels = glabs) +
scale_shape_manual(values = estimation_shapes, name = "Estimation Method", labels = glabs) +
scale_linetype_manual(values = c("dashed", "dashed", "dashed", "dashed","dashed","dashed"), name = "Estimation Method", labels = glabs) +
labs(x = "Size Probability sample", y = expression("MoAB") ) +
scale_x_continuous(breaks = c(25, 50, 75, 100)) +
theme(legend.position = "bottom")
llegend = cowplot::get_plot_component(plot_mse, 'guide-box-bottom', return_all = TRUE)
# Save the legend as a separate plot
ggsave(filename = 'legend_big_raw.pdf', plot = llegend,units ="cm" , width = 10, height = 2)
# Loop to save plots with an empty legend for pages 1 and 3, and full legend for page 2
a4_width <- 210 / 25.4
a4_height <- 297 / 25.4
# Loop to save plots with an empty legend for pages 1 and 3, and full legend for page 2
create_plot <- function(page_number) {
p_save <- plot_mse +
theme(legend.position = "none") +
facet_grid_paginate(Facetr + Facetbias_factor ~ Facetsig + Facetmc, nrow = 3, ncol = 3, page = page_number,
labeller = label_parsed)
return(p_save)
}
# Loop to save plots with an empty legend for pages 1 and 3, and full legend for page 2
for (i in 1:6) {
p_save <- create_plot(i)
ggsave(plot = p_save, filename = paste0('MoABplot_', i, '.pdf'), width = a4_height, height = a4_width)
}
knitr::opts_chunk$set(echo = TRUE)
MSEdiff_df=readRDS("Final_results_rawMSE")
MSEdiff_df
population_func = function(N,p,multi_cor){
# note check covariance or correlation later for input ALSO CHECK VARIANCE INPUT
# make a covariance matrix for p variables + 1 (selectivity variable) with a variance of 1
cov_matrix = diag(rep(0, p + 1))
cov_matrix[1:(p), 1:(p)] = multi_cor
cov_matrix[p+1, 1:(p+1)]  = 0
cov_matrix[1:(p+1),(p+1)]  = 0
diag(cov_matrix) = 1
#create p +1 variables with a 0 mean and above cov_matrix
Pop_df = as.data.frame(mvrnorm(n = N, mu = rep(0,p+1), Sigma = cov_matrix))
#Rename variables and shuffle df
Pop_df  = Pop_df %>%
rename_with(~ paste0("X", seq_along(.)), 1:p) %>%
rename(OV = p + 1) %>%
sample_n(nrow(.)) %>%
return(Pop_df)
}
popdf =  population_func(100000)
mc = c(0.38,0.64,0.87)
# beta and w correlation value
bias_factor=c(0.5,1,2)
r=c(0.5,0.7,0.9)
y_var=c(5,10)
parameter_scenario = expand.grid(mc=mc,bias_factor=bias_factor,r=r,y_var=y_var)
N = 10^5 # population size
nps_n = 10000 # Non-probability sample size
p = 3 # Number of independent variables
betas=list(c(2,1,0.5))  # variance of true Beta
fixed_parameters = expand.grid(N = N,nps_n = nps_n,p = p,betas = betas)
population_func = function(N,p,multi_cor){
# note check covariance or correlation later for input ALSO CHECK VARIANCE INPUT
# make a covariance matrix for p variables + 1 (selectivity variable) with a variance of 1
cov_matrix = diag(rep(0, p + 1))
cov_matrix[1:(p), 1:(p)] = multi_cor
cov_matrix[p+1, 1:(p+1)]  = 0
cov_matrix[1:(p+1),(p+1)]  = 0
diag(cov_matrix) = 1
#create p +1 variables with a 0 mean and above cov_matrix
Pop_df = as.data.frame(mvrnorm(n = N, mu = rep(0,p+1), Sigma = cov_matrix))
#Rename variables and shuffle df
Pop_df  = Pop_df %>%
rename_with(~ paste0("X", seq_along(.)), 1:p) %>%
rename(OV = p + 1) %>%
sample_n(nrow(.)) %>%
return(Pop_df)
}
popdf =  population_func(100000)
popdf =  population_func(100000,3,0.6)
popdf
adj_bias_func <- function(vec, target_correlation, bias_factor, p) {
set.seed(2135248)
max_sum <- sum(vec) * abs(bias_factor)
obj_func <- function(new_vec) {
scaled_vec <- new_vec / sum(new_vec) * max_sum
combined_vec <- if (bias_factor > 0) {
vec + scaled_vec
} else {
vec - scaled_vec
}
print(combined_vec)
corr <- cor(vec, combined_vec)
return(abs(corr - target_correlation))
}
initial_vec <- runif(p, 0.00, max_sum)
result <- optim(par = initial_vec, fn = obj_func, method = "L-BFGS-B", lower = 0.00, upper = max_sum)
optimized_vec <- result$par / sum(result$par) * max_sum
return(optimized_vec)
}
adj_bias_func(c(2,1,0.5),0,0,3)
Pop_df=y_func(popdf,c(2,1,0.5,0,0,0),2)
y_func = function(Pop_df,betas,y_var){
#generate betas and cov matrix matrix
num_cols = ncol(Pop_df)
for (i in 1:(num_cols - 1)) {
# Create interaction variable between the current column and the last one
interaction_col = paste0("X", i, "_interaction")
Pop_df[[interaction_col]] = Pop_df[,i] * Pop_df[,num_cols]
}
#Generate errors
error=rnorm(nrow(Pop_df),0,y_var)
pop_matrix = model.matrix(~. -1 -OV, data = Pop_df)
Pop_df = Pop_df %>%
mutate(y = pop_matrix %*% betas + error) %>%
relocate(y)
cor(Pop_df)
return(Pop_df)
}
Pop_df=y_func(popdf,c(2,1,0.5,0,0,0),2)
Pop_df
Pop_df
``
Pop_df
lm(y,-1 X1+ X2+ X3, data=Pop_df)
lm(y,-1 +X1+ X2+ X3, data=Pop_df)
Pop_df
lm(y~ -1 +X1+ X2+ X3, data=Pop_df)
summary(lm(y~ -1 +X1+ X2+ X3, data=Pop_df))
popdf =  population_func(100000,3,0.6)
Pop_df=y_func(popdf,c(2,1,0.5,0,0,0),10)
summary(lm(y~ -1 +X1+ X2+ X3, data=Pop_df))
